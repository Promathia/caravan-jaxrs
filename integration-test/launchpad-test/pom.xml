<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  wcm.io
  %%
  Copyright (C) 2015 wcm.io
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.wcm.caravan</groupId>
    <artifactId>io.wcm.caravan.jaxrs.parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../../parent/pom.xml</relativePath>
  </parent>

  <groupId>io.wcm.caravan</groupId>
  <artifactId>io.wcm.caravan.jaxrs.integration-test.launchpad-test</artifactId>
  <version>1-SNAPSHOT</version>
  <packaging>bundle</packaging>

  <name>JAX-RS Integration Test Launchpad Test</name>
  <description>
    Builds a bundle with Sling server-side tests, and executes them via
    a remote test proxy that runs in the integration-tests phase.
  </description>

  <!-- 
      To keep the instance under test running and run individual tests
      against it, use:
      
          mvn clean verify -DkeepJarRunning=true -Dhttp.port=8080
          
      optionally using jar.executor.vm.options to enable remote debugging,
      and in another console:
      
          mvn -o verify -Dtests.to.run=**/**Test.java -Dtest.server.url=http://localhost:8080
          
      optionally using -Dmaven.surefire.debug to enable debugging.            
   -->
  <properties>

    <!-- Run integration tests by default -->
    <integrationtests.skip>false</integrationtests.skip>
  
    <!-- Set this to run the server on a specific port
    <http.port></http.port>
     -->
     
    <!-- Set this to run tests against an existing server instance -->
    <keepJarRunning>false</keepJarRunning>
    
    <!-- URL of a server against which to run tests -->
    <test.server.url />
    
    <!-- Set this to run tests against a specific hostname, if test.server.url is not set-->
    <test.server.hostname />

    <!-- Set this to use a different username for remote execution of sling junit tests -->
    <test.server.username />

    <!-- Set this to use a different password for remote execution of sling junit tests -->
    <test.server.password />
    
    <!-- Options for the VM that executes our runnable jar -->
    <jar.executor.vm.options>-Xmx512m</jar.executor.vm.options>
    <!-- Alternative with JVM debug port
    <jar.executor.vm.options>-Xmx512m -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=38080,suspend=n</jar.executor.vm.options>
    -->
    
    <!-- Change this to use longer or shorter timeouts for testing -->
    <sling.testing.timeout.multiplier>1.0</sling.testing.timeout.multiplier>
    
    <!-- Set this to run the executable jar in a specified filesystem folder -->
    <jar.executor.work.folder />
    
    <!-- Options for the jar to execute. $JAREXEC_SERVER_PORT$ is replaced by the
        selected port number -->
    <jar.executor.jar.options>-p $JAREXEC_SERVER_PORT$</jar.executor.jar.options>
  </properties>

  <dependencies>

    <!-- Additional bundles needed by the Sling instance under test -->
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.junit.core</artifactId>
      <version>1.0.8</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.junit.remote</artifactId>
      <version>1.0.8</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.testing.tools</artifactId>
      <version>1.0.11-SNAPSHOT</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>io.wcm.caravan</groupId>
      <artifactId>io.wcm.caravan.jaxrs.publisher</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.wcm.caravan</groupId>
      <artifactId>io.wcm.caravan.jaxrs.integration-test.sample-service-1</artifactId>
      <version>1-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>io.wcm.caravan</groupId>
      <artifactId>io.wcm.caravan.jaxrs.integration-test.sample-service-2</artifactId>
      <version>1-SNAPSHOT</version>
    </dependency>

    <!-- sling testing tools bundles requires httpclient -->
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient-osgi</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore-osgi</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- actual dependencies -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.wcm.caravan</groupId>
      <artifactId>io.wcm.caravan.jaxrs.integration-test.launchpad</artifactId>
      <version>1-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>compile</scope>
    </dependency>

  </dependencies>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>4.1.2</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore</artifactId>
        <version>4.1.2</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient-osgi</artifactId>
        <version>4.1.2</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore-osgi</artifactId>
        <version>4.1.2</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>

      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <configuration>
          <instructions>
            <Sling-Test-Regexp>
              .*Test
            </Sling-Test-Regexp>
            <Export-Package>
              io.wcm.caravan.jaxrs.publisher.it
            </Export-Package>
          </instructions>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-scr-plugin</artifactId>
      </plugin>

      <!-- do not deploy this hierarchy pom into maven repository -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- do not generate site for this project -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <configuration>
          <skipDeploy>true</skipDeploy>
        </configuration>
      </plugin>
      
      <!-- do not generate javadocs -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      
      <!-- cleanup folders/files created for integration test -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}</directory>
              <includes>
                <include>sling/**</include>
                <include>derby.log</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      
      <!-- Download bundles to run integrartion tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-runnable-jar</id>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <includeArtifactIds>io.wcm.caravan.jaxrs.integration-test.launchpad</includeArtifactIds>
              <excludeTransitive>true</excludeTransitive>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
            </configuration>
          </execution>
          <execution>
            <!-- 
            Consider all dependencies as candidates to be installed
            as additional bundles. We use system properties to define
            which bundles to install in which order.  
            -->
            <id>copy-additional-bundles</id>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/sling/additional-bundles</outputDirectory>
              <excludeTransitive>true</excludeTransitive>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
            </configuration>
          </execution>
        </executions>
      </plugin>
      
      <!-- Find free ports to run our server -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.9.1</version>
        <executions>
          <execution>
            <id>reserve-server-port</id>
            <goals>
              <goal>reserve-network-port</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <portNames>
                <portName>http.port</portName>
              </portNames>
            </configuration>
          </execution>
        </executions>
      </plugin>
      
      <!-- Configure failsafe plugin for running Sling Launchpad-based integration tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <debugForkedProcess>${maven.surefire.debug}</debugForkedProcess>
          <systemPropertyVariables>
            <test.server.url>${test.server.url}</test.server.url>
            <test.server.hostname>${test.server.hostname}</test.server.hostname>
            <test.server.username>${test.server.username}</test.server.username>
            <test.server.password>${test.server.password}</test.server.password>
            <jar.executor.server.port>${http.port}</jar.executor.server.port>
            <jar.executor.vm.options>${jar.executor.vm.options}</jar.executor.vm.options>
            <jar.executor.jar.folder>${project.basedir}/target/dependency</jar.executor.jar.folder>
            <jar.executor.jar.name.regexp>io.wcm.caravan.jaxrs.integration-test.launchpad.*jar$</jar.executor.jar.name.regexp>
            <jar.executor.work.folder>${jar.executor.work.folder}</jar.executor.work.folder>
            <jar.executor.jar.options>${jar.executor.jar.options}</jar.executor.jar.options>
            <additional.bundles.path>${project.basedir}/target,${project.basedir}/target/sling/additional-bundles</additional.bundles.path>
            <keepJarRunning>${keepJarRunning}</keepJarRunning>
            <server.ready.timeout.seconds>60</server.ready.timeout.seconds>
            <sling.testing.timeout.multiplier>${sling.testing.timeout.multiplier}</sling.testing.timeout.multiplier>
            <server.ready.path.1>/hal:The HAL Browser</server.ready.path.1>
            <start.bundles.timeout.seconds>30</start.bundles.timeout.seconds>
            <bundle.install.timeout.seconds>20</bundle.install.timeout.seconds>
            <!-- 
            Define additional bundles to install by specifying the beginning of their artifact name.
            The bundles are installed in lexical order of these property names.
            All bundles must be listed as dependencies in this pom, or they won't be installed. 
            -->
            <sling.additional.bundle.01>org.apache.sling.junit.core</sling.additional.bundle.01>
            <sling.additional.bundle.10>io.wcm.caravan.jaxrs.publisher</sling.additional.bundle.10>
            <sling.additional.bundle.11>io.wcm.caravan.jaxrs.integration-test.sample-service-1</sling.additional.bundle.11>
            <sling.additional.bundle.12>io.wcm.caravan.jaxrs.integration-test.sample-service-2</sling.additional.bundle.12>
            <sling.additional.bundle.20>${project.build.finalName}.jar</sling.additional.bundle.20>
          </systemPropertyVariables>
        </configuration>
      </plugin>
  
    </plugins>
  </build>
  
  <profiles>

    <!-- This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself. -->
    <profile>
      <id>only-eclipse</id>
      <activation>
        <property>
          <name>m2e.version</name>
        </property>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.eclipse.m2e</groupId>
              <artifactId>lifecycle-mapping</artifactId>
              <version>1.0.0</version>
              <configuration>
                <lifecycleMappingMetadata>
                  <pluginExecutions>
                    <pluginExecution>
                      <pluginExecutionFilter>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <versionRange>[2.10,)</versionRange>
                        <goals>
                          <goal>copy-dependencies</goal>
                        </goals>
                      </pluginExecutionFilter>
                      <action>
                        <ignore></ignore>
                      </action>
                    </pluginExecution>
                    <pluginExecution>
                      <pluginExecutionFilter>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <versionRange>[1.9.1,)</versionRange>
                        <goals>
                          <goal>reserve-network-port</goal>
                        </goals>
                      </pluginExecutionFilter>
                      <action>
                        <ignore></ignore>
                      </action>
                    </pluginExecution>
                  </pluginExecutions>
                </lifecycleMappingMetadata>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <!-- "Fast" profile for quick compile of the project without any unit tests etc. -->
    <profile>
      <id>fast</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <unittests.skip>true</unittests.skip>
        <integrationtests.skip>true</integrationtests.skip>
        <maven.javadoc.skip>true</maven.javadoc.skip>
      </properties>
    </profile>

  </profiles>

</project>
